{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["getTime","time","isNaN","Math","floor","slice","TRACKS","id","title","TimeBar","currentTime","duration","setTime","formattedCurrentTime","formattedDuration","sBits","count","push","seconds","map","second","key","onClick","style","float","cursor","height","width","round","background","transition","className","App","state","selectedTrack","player","handleSkip","direction","currentTrackIndex","findIndex","track","tracksAmount","length","trackToPlay","setState","document","this","addEventListener","e","target","removeEventListener","prevProps","prevState","src","play","pause","list","item","fontWeight","ref","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ec9f42ac.chunk.js","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles.css\";\n\nconst zoeluna = \"audio/romantic-espanol/zoe-luna.mp3\";\nconst zoeSone = \"audio/romantic-espanol/zoe-sone.mp3\";\nconst leonLocos = \"audio/romantic-espanol/leon-locos.mp3\";\nconst bbVete = \"audio/romantic-espanol/bb-vete.mp3\";\nconst ctEres = \"audio/romantic-espanol/cafe-tacuba-eres.mp3\";\nconst vfPrim = \"audio/romantic-espanol/chente-primavera.mp3\";\n\nfunction getTime(time) {\n  if (!isNaN(time)) {\n    return (\n      Math.floor(time / 60) + \":\" + (\"0\" + Math.floor(time % 60)).slice(-2)\n    );\n  }\n}\n\nconst TRACKS = [\n  { id: 1, title: \"Veté - Bad Bunny\"},\n  { id: 2, title: \"Un Millon de Primaveras - Chente\"},\n  { id: 3, title: \"Eres - Cafe Tacuba\"},\n  { id: 4, title: \"Soñe - Zoé\"},\n  { id: 5, title: \"Luna - Zoé\" },\n  { id: 6, title: \"Locos - Leon\" }\n];\n\nclass App extends React.Component {\n  state = {\n    selectedTrack: null,\n    player: \"stopped\",\n    currentTime: null,\n    duration: null\n  };\n\n  componentDidMount() {\n    document.title = \"1st Station\"\n    this.player.addEventListener(\"timeupdate\", e => {\n      this.setState({\n        currentTime: e.target.currentTime,\n        duration: e.target.duration\n      });\n    });\n  }\n\n  componentWillUnmount() {\n    this.player.removeEventListener(\"timeupdate\", () => {});\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.state.selectedTrack !== prevState.selectedTrack) {\n      let track;\n      switch (this.state.selectedTrack) {\n        case \"Veté - Bad Bunny\":\n          track = bbVete;\n          break;\n        case \"Un Millon de Primaveras - Chente\":\n          track = vfPrim;\n          break;\n        case \"Eres - Cafe Tacuba\":\n          track = ctEres;\n          break;\n        case \"Soñe - Zoé\":\n          track = zoeSone;\n          break;\n        case \"Luna - Zoé\":\n          track = zoeluna;\n          break;\n        case \"Locos - Leon\":\n          track = leonLocos;\n          break;\n        default:\n          break;\n      }\n      if (track) {\n        this.player.src = track;\n        this.player.play();\n        this.setState({ player: \"playing\", duration: this.player.duration });\n      }\n    }\n    if (this.state.player !== prevState.player) {\n      if (this.state.player === \"paused\") {\n        this.player.pause();\n      } else if (this.state.player === \"stopped\") {\n        this.player.pause();\n        this.player.currentTime = 0;\n        this.setState({ selectedTrack: null });\n      } else if (\n        this.state.player === \"playing\" &&\n        prevState.player === \"paused\"\n      ) {\n        this.player.play();\n      }\n    }\n    if (\n      this.state.duration &&\n      !isNaN(this.state.duration) &&\n      this.state.duration === this.state.currentTime\n    ) {\n      const currentTrackIndex = TRACKS.findIndex(\n        track => track.title === this.state.selectedTrack\n      );\n      const tracksAmount = TRACKS.length - 1;\n      if (currentTrackIndex === tracksAmount) {\n        this.setState({\n          selectedTrack: null,\n          player: \"stopped\",\n          currentTime: null,\n          duration: null\n        });\n      } else {\n        this.handleSkip(\"next\");\n      }\n    }\n  }\n\n  handleSkip = direction => {\n    const currentTrackIndex = TRACKS.findIndex(\n      track => track.title === this.state.selectedTrack\n    );\n    const tracksAmount = TRACKS.length - 1;\n    if (direction === \"previous\") {\n      const previousTrack =\n        currentTrackIndex === 0 ? tracksAmount : currentTrackIndex - 1;\n      const trackToPlay = TRACKS[previousTrack];\n      this.setState({ selectedTrack: trackToPlay.title });\n    } else if (direction === \"next\") {\n      const nextTrack =\n        currentTrackIndex === tracksAmount ? 0 : currentTrackIndex + 1;\n      const trackToPlay = TRACKS[nextTrack];\n      this.setState({ selectedTrack: trackToPlay.title, duration: null });\n    }\n  };\n\n  setTime = time => {\n    this.player.currentTime = time;\n  };\n\n  render() {\n    const list = TRACKS.map(item => {\n      return (\n        <li\n          key={item.id}\n          onClick={() => this.setState({ selectedTrack: item.title })}\n          style={{\n            fontWeight: item.title === this.state.selectedTrack && \"bold\"\n          }}\n        >\n          {item.title}\n        </li>\n      );\n    });\n\n    const currentTime = getTime(this.state.currentTime);\n    const duration = getTime(this.state.duration);\n\n    return (\n      <>\n        <title> First Station </title>\n        <h1>Quarantine Vibes</h1>\n        <div className=\"player\">\n          <ul className=\"tracklist\">{list}</ul>\n          <TimeBar\n            setTime={this.setTime}\n            currentTime={this.state.currentTime}\n            duration={this.state.duration}\n          />\n          {this.state.player !== \"stopped\" && (\n            <div className=\"buttons\">\n              <button onClick={() => this.handleSkip(\"previous\")}>\n                Previous\n              </button>\n              {this.state.player === \"paused\" && (\n                <button onClick={() => this.setState({ player: \"playing\" })}>\n                  Play\n                </button>\n              )}\n              {this.state.player === \"playing\" && (\n                <button onClick={() => this.setState({ player: \"paused\" })}>\n                  Pause\n                </button>\n              )}\n              <button onClick={() => this.setState({ player: \"stopped\" })}>\n                Stop\n              </button>\n              <button onClick={() => this.handleSkip(\"next\")}>Skip</button>\n            </div>\n          )}\n        </div>\n        <audio ref={ref => (this.player = ref)} />\n      </>\n    );\n  }\n}\n\nfunction TimeBar({ currentTime, duration, setTime }) {\n  const formattedCurrentTime = getTime(currentTime);\n  const formattedDuration = getTime(duration);\n  const sBits = [];\n  let count = 0;\n  while (count < duration) {\n    sBits.push(count);\n    count++;\n  }\n  const seconds = sBits.map(second => {\n    return (\n      <div\n        key={second}\n        onClick={() => setTime(second)}\n        style={{\n          float: \"left\",\n          cursor: \"pointer\",\n          height: \"30px\",\n          width: `${300 / Math.round(duration)}px`,\n          background:\n            currentTime && Math.round(currentTime) === second\n              ? \"white\"\n              : \"black\",\n          transition: \"all 0.5s ease-in-out\"\n        }}\n      />\n    );\n  });\n  return (\n    <div className=\"timebar\">\n      <div className=\"bar\">{seconds}</div>\n      {currentTime ? (\n        <div className=\"time\">\n          {formattedCurrentTime} / {formattedDuration}\n        </div>\n      ) : (\n        \"\"\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}